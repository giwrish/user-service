// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repository

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING username, created_at, updated_at
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CreateUserRow struct {
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateUserRow
	err := row.Scan(&i.Username, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE username = $1
RETURNING username
`

func (q *Queries) DeleteUser(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, deleteUser, username)
	err := row.Scan(&username)
	return username, err
}

const getUser = `-- name: GetUser :one
SELECT username, created_at, updated_at FROM users 
WHERE username = $1
`

type GetUserRow struct {
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(&i.Username, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $1, updated_at = $2
WHERE username = $3
RETURNING username
`

type UpdateUserPasswordParams struct {
	Password  string    `json:"password"`
	UpdatedAt time.Time `json:"updated_at"`
	Username  string    `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (string, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Password, arg.UpdatedAt, arg.Username)
	var username string
	err := row.Scan(&username)
	return username, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)
`

func (q *Queries) UserExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
